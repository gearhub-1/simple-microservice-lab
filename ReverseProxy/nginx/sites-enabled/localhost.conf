upstream frontend {
    # Docker Compose often exposes containers on localhost with high ports
    server frontend:80;  

    # Load balancing options (choose ONE that fits your needs):
    # round_robin;          # Basic round-robin (default if none specified)
    # least_conn;          # Least connections
    # ip_hash;             # Sticky sessions based on client IP
}

upstream quote_service {
    # Docker Compose often exposes containers on localhost with high ports
    server quotes:5000;  

    # Load balancing options (choose ONE that fits your needs):
    # round_robin;          # Basic round-robin (default if none specified)
    # least_conn;          # Least connections
    # ip_hash;             # Sticky sessions based on client IP
}

upstream api_service {
    # Docker Compose often exposes containers on localhost with high ports
    server api:3000;  

    # Load balancing options (choose ONE that fits your needs):
    # round_robin;          # Basic round-robin (default if none specified)
    # least_conn;          # Least connections
    # ip_hash;             # Sticky sessions based on client IP
}
server {
	listen 80;
	listen [::]:80;

    server_name  localhost;

    location / {
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /api {
        proxy_pass http://api_service/api/randomquote;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /service {
        rewrite ^/service/api/quote(.*)$ /api/quote$1 break;
        proxy_pass http://quote_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}